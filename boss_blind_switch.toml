[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# logic so i will not suffer i lot
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
G.GAME.hands[text].visible = true
'''
position = "after"
payload = '''
local is_boss_add_chips_active = false
    if G.GAME.blind.name == 'Small Blind' then
        is_boss_add_chips_active = true
    end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
if effects[ii].mult then 
    if effects[ii].card then juice_card(effects[ii].card) end
    mult = mod_mult(mult + effects[ii].mult)
    update_hand_text({delay = 0}, {mult = mult})
    card_eval_status_text(scoring_hand[i], 'mult', effects[ii].mult, percent)
end
'''
position = "at"
payload = '''
if effects[ii].card then juice_card(effects[ii].card) end
if is_boss_add_chips_active then
    hand_chips = mod_mult(hand_chips + effects[ii].mult)
else 
    mult = mod_mult(mult + effects[ii].mult)
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
if effects[ii].extra.mult_mod then mult =mod_mult( mult + effects[ii].extra.mult_mod);extras.mult = true end
'''
position = "at"
payload = '''
if effects[ii].extra.mult_mod then 
    if is_boss_add_chips_active then
        hand_chips = mod_chips(hand_chips + effects[ii].extra.chip_mod)
        extras.hand_chips = true 
    else 
        mult =mod_mult( mult + effects[ii].extra.mult_mod)
        extras.mult = true 
    end
    
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
if effects[ii].edition then
    hand_chips = mod_chips(hand_chips + (effects[ii].edition.chip_mod or 0))
    mult = mult + (effects[ii].edition.mult_mod or 0)
    mult = mod_mult(mult*(effects[ii].edition.x_mult_mod or 1))
    update_hand_text({delay = 0}, {
        chips = effects[ii].edition.chip_mod and hand_chips or nil,
        mult = (effects[ii].edition.mult_mod or effects[ii].edition.x_mult_mod) and mult or nil,
    })
    card_eval_status_text(scoring_hand[i], 'extra', nil, percent, nil, {
        message = (effects[ii].edition.chip_mod and localize{type='variable',key='a_chips',vars={effects[ii].edition.chip_mod}}) or
                (effects[ii].edition.mult_mod and localize{type='variable',key='a_mult',vars={effects[ii].edition.mult_mod}}) or
                (effects[ii].edition.x_mult_mod and localize{type='variable',key='a_xmult',vars={effects[ii].edition.x_mult_mod}}),
        chip_mod =  effects[ii].edition.chip_mod,
        mult_mod =  effects[ii].edition.mult_mod,
        x_mult_mod =  effects[ii].edition.x_mult_mod,
        colour = G.C.DARK_EDITION,
        edition = true})
end
'''
position = "at"
payload = '''
if effects[ii].edition then
    if is_boss_add_chips_active then
        hand_chips = mod_chips(hand_chips + (effects[ii].edition.chip_mod or 0))
        hand_chips = mod_chips(hand_chips + (effects[ii].edition.mult_mod or 0))
        mult = mod_mult(mult*(effects[ii].edition.x_mult_mod or 1))
        update_hand_text({delay = 0}, {
            chips = effects[ii].edition.chip_mod or effects[ii].edition.mult_mod) and hand_chips or nil,
            mult = (effects[ii].edition.x_mult_mod) and mult or nil,
        })
        card_eval_status_text(scoring_hand[i], 'extra', nil, percent, nil, {
            message = (effects[ii].edition.chip_mod and localize{type='variable',key='a_chips',vars={effects[ii].edition.chip_mod}}) or
                    (effects[ii].edition.mult_mod and localize{type='variable',key='a_chips',vars={effects[ii].edition.mult_mod}}) or
                    (effects[ii].edition.x_mult_mod and localize{type='variable',key='a_xmult',vars={effects[ii].edition.x_mult_mod}}),
            chip_mod =  effects[ii].edition.chip_mod,
            chip_mod =  effects[ii].edition.mult_mod,
            x_mult_mod =  effects[ii].edition.x_mult_mod,
            colour = G.C.DARK_EDITION,
            edition = true})
    else 
        hand_chips = mod_chips(hand_chips + (effects[ii].edition.chip_mod or 0))
        mult = mult + (effects[ii].edition.mult_mod or 0)
        mult = mod_mult(mult*(effects[ii].edition.x_mult_mod or 1))
        update_hand_text({delay = 0}, {
            chips = effects[ii].edition.chip_mod and hand_chips or nil,
            mult = (effects[ii].edition.mult_mod or effects[ii].edition.x_mult_mod) and mult or nil,
        })
        card_eval_status_text(scoring_hand[i], 'extra', nil, percent, nil, {
            message = (effects[ii].edition.chip_mod and localize{type='variable',key='a_chips',vars={effects[ii].edition.chip_mod}}) or
                    (effects[ii].edition.mult_mod and localize{type='variable',key='a_mult',vars={effects[ii].edition.mult_mod}}) or
                    (effects[ii].edition.x_mult_mod and localize{type='variable',key='a_xmult',vars={effects[ii].edition.x_mult_mod}}),
            chip_mod =  effects[ii].edition.chip_mod,
            mult_mod =  effects[ii].edition.mult_mod,
            x_mult_mod =  effects[ii].edition.x_mult_mod,
            colour = G.C.DARK_EDITION,
            edition = true})
    end
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
if effects[ii].h_mult then
    mod_percent = true
    mult = mod_mult(mult + effects[ii].h_mult)
    update_hand_text({delay = 0}, {mult = mult})
    card_eval_status_text(G.hand.cards[i], 'h_mult', effects[ii].h_mult, percent)
end
'''
position = "at"
payload = '''
if effects[ii].h_mult then
    if is_boss_add_chips_active then
        mod_percent = true
        hand_chips = mod_chips(hand_chips + effects[ii].h_mult)
        update_hand_text({delay = 0}, {mult = mult})
        card_eval_status_text(G.hand.cards[i], 'h_mult', effects[ii].h_mult, percent)
    else 
        mod_percent = true
        mult = mod_mult(mult + effects[ii].h_mult)
        update_hand_text({delay = 0}, {mult = mult})
        card_eval_status_text(G.hand.cards[i], 'h_mult', effects[ii].h_mult, percent)
    end
end

'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
if edition_effects.jokers.mult_mod then
    mult = mod_mult(mult + edition_effects.jokers.mult_mod)
    update_hand_text({delay = 0}, {mult = mult})
    card_eval_status_text(_card, 'jokers', nil, percent, nil, {
        message = localize{type='variable',key='a_mult',vars={edition_effects.jokers.mult_mod}},
        mult_mod =  edition_effects.jokers.mult_mod,
        colour = G.C.DARK_EDITION,
        edition = true})
end
'''
position = "at"
payload = '''
if edition_effects.jokers.mult_mod then
    if is_boss_add_chips_active then
        hand_chips = mod_chips(hand_chips + edition_effects.jokers.mult_mod)
        update_hand_text({delay = 0}, {mult = mult})
        card_eval_status_text(_card, 'jokers', nil, percent, nil, {
            message = localize{type='variable',key='a_mult',vars={edition_effects.jokers.mult_mod}},
            mult_mod =  edition_effects.jokers.mult_mod,
            colour = G.C.DARK_EDITION,
            edition = true})
    else 
        mult = mod_mult(mult + edition_effects.jokers.mult_mod)
        update_hand_text({delay = 0}, {mult = mult})
        card_eval_status_text(_card, 'jokers', nil, percent, nil, {
            message = localize{type='variable',key='a_mult',vars={edition_effects.jokers.mult_mod}},
            mult_mod =  edition_effects.jokers.mult_mod,
            colour = G.C.DARK_EDITION,
            edition = true})
    end
end


'''
match_indent = true




[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
--Any Joker effects
if effects.jokers then 
    local extras = {mult = false, hand_chips = false}
    if effects.jokers.mult_mod then mult = mod_mult(mult + effects.jokers.mult_mod);extras.mult = true end
end
'''
position = "at"
payload = '''
if effects.jokers then 
    local extras = {mult = false, hand_chips = false}
    if is_boss_add_chips_active then
        if effects.jokers.mult_mod then hand_chips = mod_chips(hand_chips + effects.jokers.mult_mod);extras.hand_chips = true end
    else 
        if effects.jokers.mult_mod then mult = mod_mult(mult + effects.jokers.mult_mod);extras.mult = true end
    end
end


'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
if effect.mult_mod then mult = mod_mult(mult + effect.mult_mod);extras.mult = true end
'''
position = "at"
payload = '''

if is_boss_add_chips_active then
    if effect.chip_mod then hand_chips = mod_chips(hand_chips + effect..mult_mod);extras.hand_chips = true end
else 
    if effect.mult_mod then mult = mod_mult(mult + effect.mult_mod);extras.mult = true end
end



'''
match_indent = true